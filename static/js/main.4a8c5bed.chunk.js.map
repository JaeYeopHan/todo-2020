{"version":3,"sources":["components/shared/Header.tsx","components/shared/ListContainer.tsx","components/shared/Main.tsx","utils/storage/localStorage.ts","utils/base64.ts","utils/storage/index.ts","features/Todo.ts","utils/item.ts","utils/array.ts","hooks/useTouchStyle.ts","components/Filters.tsx","features/Toast.ts","utils/validate.ts","hooks/useValidateInput.ts","components/Input.tsx","components/Item.tsx","components/shared/transition/DrawerTransition.tsx","components/shared/transition/FadeTransition.tsx","components/shared/Dimmed.tsx","components/shared/Toast.tsx","features/index.ts","index.tsx","components/App.tsx","hooks/useRemount.ts"],"names":["Header","props","className","children","ListContainer","Main","getItem","key","defaultValue","window","localStorage","rawData","encodeed","decoded","decodeURIComponent","atob","JSON","parse","setItem","value","val","stringifyData","stringify","encoded","btoa","encodeURIComponent","TODO_ITEMS","Filter","initialState","name","getState","items","currentFilter","ALL","_","createSlice","reducers","add","state","timestamp","payload","contents","createdTime","push","id","isCompleted","delete","newItems","filter","toggle","map","item","changeFilter","getFilter","getItems","todoSelectors","visibleItems","createSelector","slice","sort","prev","next","Number","sortWithBoolean","ACTIVE","DONE","Error","TODO","todoActions","actions","todoReducer","reducer","useTouchStyle","defaultClassName","selectClassName","useState","isClicked","setClicking","classnames","activate","useCallback","inactivate","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","Filters","Object","values","index","FilterButton","dispatch","useDispatch","useSelector","touchStyleProps","onClick","open","action","close","TOAST","toastActions","toastReducer","isValidateInput","test","Input","intialValue","setVal","isError","setError","isEmpty","trim","useEffect","useValidateInput","textAreaStyle","onChange","target","placeholder","wrap","Date","getTime","Item","itemContentsStyle","type","checked","htmlFor","DrawerTransition","CSSTransition","timeout","in","mountOnEnter","isMountOnEnter","onEnter","onExited","classNames","FadeTransition","Dimmed","style","display","isShow","Toast","isOpen","onClose","rootReducer","combineReducers","configureStore","middleware","getDefaultMiddleware","returnValue","ReactDOM","render","store","setKey","useRemount","remount","document","getElementById"],"mappings":"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","file":"static/js/main.4a8c5bed.chunk.js","sourcesContent":["import \"./Header.scss\";\n\nimport React, { ReactNode } from \"react\";\n\ninterface IHeaderProps {\n  children: ReactNode;\n}\n\nexport const Header = (props: IHeaderProps) => {\n  return <h1 className=\"header\">{props.children}</h1>;\n};\n","import \"./ListContainer.scss\";\n\nimport React, { ReactNode } from \"react\";\n\ninterface IListContainerProps {\n  children: ReactNode;\n}\n\nexport const ListContainer = (props: IListContainerProps) => {\n  return <ul className=\"list\">{props.children}</ul>;\n};\n","import \"./Main.scss\";\n\nimport React, { ReactNode } from \"react\";\n\ninterface IMainProps {\n  children: ReactNode;\n}\n\nexport const Main = (props: IMainProps) => {\n  return <main className=\"main\">{props.children}</main>;\n};\n","import { decode, encode } from \"../base64\";\n\nexport function getItem<T>(key: string, defaultValue: T) {\n  if (!window.localStorage) {\n    return defaultValue;\n  }\n\n  const rawData: string | null = window.localStorage.getItem(key);\n\n  if (!rawData) {\n    return defaultValue;\n  }\n\n  const decoded = decode(rawData);\n  const result = JSON.parse(decoded);\n\n  return result;\n}\n\nexport function setItem<T>(key: string, value: T) {\n  if (!window.localStorage) {\n    return;\n  }\n\n  const stringifyData = JSON.stringify(value);\n  const encoded = encode(stringifyData);\n\n  return window.localStorage.setItem(key, encoded);\n}\n","export function encode(val: string) {\n  return window.btoa(encodeURIComponent(val));\n}\n\nexport function decode(encodeed: string) {\n  return decodeURIComponent(window.atob(encodeed));\n}\n","import { getItem, setItem } from \"./localStorage\";\n\nconst TODO_ITEMS = \"__LOCALSTORAGE_TODO_ITEMS_KEY__\";\n\nexport function getState<T>(name: string, defaultValue: T) {\n  const rawData = getItem(TODO_ITEMS, defaultValue);\n\n  if (!rawData) {\n    return defaultValue;\n  }\n\n  return rawData[name] || defaultValue;\n}\n\nexport function setState<T>(val: T) {\n  return setItem(TODO_ITEMS, val);\n}\n","import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { sortWithBoolean } from \"@/utils/array\";\nimport { generateId } from \"@/utils/item\";\nimport { getState } from \"@/utils/storage\";\n\nconst name = \"Todo\";\n\nexport interface IItem {\n  id: string;\n  contents: string;\n  createdTime: number;\n  isCompleted: boolean;\n}\n\nexport type IItemIdentity = Pick<IItem, \"id\">;\n\nexport interface ITodo {\n  items: IItem[];\n  currentFilter: Filter;\n}\n\nexport enum Filter {\n  ALL = \"All\",\n  ACTIVE = \"Active\",\n  DONE = \"Done\"\n}\n\nexport interface IAddPayload {\n  contents: string;\n  createdTime: number;\n}\n\nexport interface IDeletePayload extends IItemIdentity {}\n\nexport interface ITogglePayload extends IItemIdentity {}\n\nconst initialState: ITodo = getState(name, {\n  items: [],\n  currentFilter: Filter.ALL\n});\n\nconst _ = createSlice({\n  name,\n  initialState,\n  reducers: {\n    add(state: ITodo, { payload }: PayloadAction<IAddPayload>) {\n      const { contents, createdTime } = payload;\n\n      state.items.push({\n        id: generateId(createdTime),\n        contents,\n        createdTime,\n        isCompleted: false\n      });\n    },\n    delete(state: ITodo, { payload }: PayloadAction<IDeletePayload>) {\n      const newItems = state.items.filter(({ id }) => payload.id !== id);\n\n      state.items = newItems;\n    },\n    toggle(state: ITodo, { payload }: PayloadAction<ITogglePayload>) {\n      const newItems = state.items.map((item: IItem) => {\n        if (payload.id === item.id) {\n          item.isCompleted = !item.isCompleted;\n        }\n        return item;\n      });\n\n      state.items = newItems;\n    },\n    changeFilter(state: ITodo, { payload }: PayloadAction<{ filter: Filter }>) {\n      state.currentFilter = payload.filter;\n    }\n  }\n});\n\nconst getFilter = (state: ITodo) => state.currentFilter;\nconst getItems = (state: ITodo) => state.items;\nconst getVisibleItems = createSelector(\n  [getFilter, getItems],\n  (filter, items) => {\n    switch (filter) {\n      case Filter.ALL:\n        return items\n          .slice()\n          .sort((prev, next) =>\n            sortWithBoolean(prev.isCompleted, next.isCompleted)\n          );\n      case Filter.ACTIVE:\n        return items.filter(item => !item.isCompleted);\n      case Filter.DONE:\n        return items.filter(item => item.isCompleted);\n      default:\n        throw Error(`Not found filter: ${filter}`);\n    }\n  }\n);\n\nexport const todoSelectors = {\n  filter: getFilter,\n  items: getItems,\n  visibleItems: getVisibleItems\n};\n\nexport const TODO = _.name;\nexport const todoActions = _.actions;\nexport const todoReducer = _.reducer;\n","export function generateId(timestamp: number) {\n  return `item_${timestamp}`;\n}\n","export function sortWithBoolean(\n  prev: boolean,\n  next: boolean,\n  reverse: boolean = false\n): number {\n  if (reverse) {\n    return Number(next) - Number(prev);\n  }\n  return Number(prev) - Number(next);\n}\n","import classnames from \"classnames\";\nimport { useCallback, useState } from \"react\";\n\nexport function useTouchStyle(\n  defaultClassName: string,\n  selectClassName: string\n) {\n  const [isClicked, setClicking] = useState(false);\n  const className = classnames(defaultClassName, {\n    [selectClassName]: isClicked\n  });\n  const activate = useCallback(() => setClicking(true), []);\n  const inactivate = useCallback(() => setClicking(false), []);\n\n  return {\n    className,\n    onTouchStart: activate,\n    onTouchEnd: inactivate,\n    onMouseDown: activate,\n    onMouseUp: inactivate\n  };\n}\n","import \"./Filters.scss\";\n\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { IRootState } from \"@/features\";\nimport { Filter, TODO, todoActions, todoSelectors } from \"@/features/Todo\";\nimport { useTouchStyle } from \"@/hooks/useTouchStyle\";\n\nexport const Filters = () => {\n  return (\n    <section className=\"filters\">\n      {Object.values(Filter).map((filter: Filter, index: number) => {\n        return <FilterButton key={`filter_button_${index}`} filter={filter} />;\n      })}\n    </section>\n  );\n};\n\ninterface IFilterButton {\n  filter: Filter\n}\n\nconst FilterButton = (props: IFilterButton) => {\n  const { filter } = props\n  const dispatch = useDispatch();\n  const currentFilter = useSelector<IRootState, Filter>(state =>\n    todoSelectors.filter(state[TODO])\n  );\n  const filterButtonStyle = classnames(\"filters-button\", {\n    \"filters-button--active\": filter === currentFilter\n  });\n  const touchStyleProps = useTouchStyle(filterButtonStyle, \"filters-button--selected\")\n\n  return (\n    <button\n      {...touchStyleProps}\n      onClick={() =>\n        dispatch(todoActions.changeFilter({ filter }))\n      }\n    >\n      {filter}\n    </button>\n  )\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst name = \"Toast\";\n\nexport interface IToast {\n  [key: string]: boolean;\n}\nconst initialState: IToast = {};\n\nconst _ = createSlice({\n  name,\n  initialState,\n  reducers: {\n    open(state: IToast, action: PayloadAction<string>) {\n      state[action.payload] = true;\n    },\n    close(state: IToast, action: PayloadAction<string>) {\n      state[action.payload] = false;\n    }\n  }\n});\n\nexport const TOAST = _.name;\nexport const toastActions = _.actions;\nexport const toastReducer = _.reducer;\n","export function isValidateInput(val: string) {\n  return !/[$&+,:;=?#|'<>^*%!]/g.test(val);\n}\n","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\n\nimport { isValidateInput } from \"@/utils/validate\";\n\nexport const useValidateInput = (\n  intialValue = \"\"\n): [string, Dispatch<SetStateAction<string>>, boolean, boolean] => {\n  const [val, setVal] = useState(intialValue);\n  const [isError, setError] = useState(false);\n  const isEmpty = val.trim() === \"\";\n\n  useEffect(() => {\n    setError(!isValidateInput(val));\n  }, [val]);\n\n  return [val, setVal, isError, isEmpty];\n};\n","import \"./Input.scss\";\n\nimport classnames from \"classnames\";\nimport React, { ChangeEvent, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { toastActions } from \"@/features/Toast\";\nimport { TODO, todoActions } from \"@/features/Todo\";\nimport { useTouchStyle } from \"@/hooks/useTouchStyle\";\nimport { useValidateInput } from \"@/hooks/useValidateInput\";\n\nexport const Input = () => {\n  const dispatch = useDispatch();\n  const [val, setVal, isError, isEmpty] = useValidateInput();\n\n  const onChangeInput = ({ target }: ChangeEvent<HTMLTextAreaElement>) => {\n    setVal(target.value);\n  };\n  const onClickSubmit = () => {\n    if (isEmpty || isError) {\n      return;\n    }\n\n    dispatch(\n      todoActions.add({\n        contents: val,\n        createdTime: new Date().getTime()\n      })\n    );\n    setVal(\"\");\n  };\n\n  const textAreaStyle = classnames(\"input-textarea\", {\n    \"input-textarea--warning\": isError\n  });\n  const submitButtonStyle = classnames(\"btn-submit\", {\n    \"btn-submit--warning\": isError\n  });\n  const touchStyleProps = useTouchStyle(submitButtonStyle, \"btn-submit--selected\")\n\n  useEffect(() => {\n    if (isError) {\n      dispatch(toastActions.open(TODO));\n    }\n  }, [val, isError, setVal, dispatch]);\n\n  return (\n    <section className=\"input\">\n      <textarea\n        className={textAreaStyle}\n        onChange={onChangeInput}\n        value={val}\n        placeholder=\"Enter the TODO item\"\n        wrap=\"off\"\n      />\n      <button {...touchStyleProps} onClick={onClickSubmit}>\n        Submit\n      </button>\n    </section>\n  );\n};\n","import \"./Item.scss\";\n\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { IItem, todoActions } from \"@/features/Todo\";\nimport { useTouchStyle } from '@/hooks/useTouchStyle'\n\ninterface IItemProps extends IItem { }\n\nexport const Item = (props: IItemProps) => {\n  const dispatch = useDispatch();\n  const touchStyleProps = useTouchStyle(\"item\", \"item--selected\")\n  const { id, contents, isCompleted } = props;\n\n  const itemContentsStyle = classnames(\"item-contents\", {\n    \"item-contents--cancel\": isCompleted\n  });\n\n  return (\n    <li\n      {...touchStyleProps}\n      onClick={() => dispatch(todoActions.toggle({ id }))}\n    >\n      <input\n        className=\"item-checkbox\"\n        type=\"checkbox\"\n        id={id}\n        checked={isCompleted}\n        onChange={() => dispatch(todoActions.toggle({ id }))}\n      />\n      <label className=\"item-checkbox-label\" htmlFor={id} />\n      <div className={itemContentsStyle}>{contents}</div>\n      {isCompleted && (\n        <button\n          className=\"item-button\"\n          onClick={() => dispatch(todoActions.delete({ id }))}\n        >\n          X\n        </button>\n      )}\n    </li>\n  );\n};\n","import './DrawerTransition.scss'\n\nimport React, { ReactChild } from 'react'\nimport { CSSTransition } from 'react-transition-group'\n\ninterface IDrawerTransitionProps {\n  children: ReactChild | ReactChild[]\n  in: boolean\n  isMountOnEnter?: boolean\n  onEnter?: () => void\n  onExited?: () => void\n}\n\nexport const DrawerTransition = (props: IDrawerTransitionProps) => {\n  return (\n    <CSSTransition\n      timeout={400}\n      in={props.in}\n      mountOnEnter={props.isMountOnEnter}\n      onEnter={props.onEnter}\n      onExited={props.onExited}\n      classNames={'drawer'}\n    >\n      {props.children}\n    </CSSTransition>\n  )\n}\n","import './FadeTransition.scss'\n\nimport React, { ReactChild } from 'react'\nimport { CSSTransition } from 'react-transition-group'\n\ninterface IFadeTransitionProps {\n  children: ReactChild | ReactChild[]\n  in: boolean\n  isMountOnEnter?: boolean\n}\n\nexport const FadeTransition = (props: IFadeTransitionProps) => {\n  const { isMountOnEnter = false } = props\n\n  return (\n    <CSSTransition timeout={300} in={props.in} mountOnEnter={isMountOnEnter} classNames={'fade'}>\n      {props.children}\n    </CSSTransition>\n  )\n}\n","import \"./Dimmed.scss\";\n\nimport React, { ReactNode } from \"react\";\n\ninterface IDimmedProps {\n  isShow: boolean;\n  children: ReactNode;\n}\n\nexport const Dimmed = (props: IDimmedProps) => {\n  return (\n    <div\n      className=\"dimmed\"\n      style={{ display: props.isShow ? \"block\" : \"none\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n","import \"./Toast.scss\";\n\nimport React, { ReactNode } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { DrawerTransition } from \"@/components/shared/transition/DrawerTransition\";\nimport { FadeTransition } from \"@/components/shared/transition/FadeTransition\";\nimport { IRootState } from \"@/features\";\nimport { IToast, TOAST, toastActions } from \"@/features/Toast\";\n\nimport { Dimmed } from \"./Dimmed\";\n\ninterface IToastProps {\n  children: ReactNode;\n  id: string;\n  onClose?: (...args: any[]) => any;\n}\n\nexport const Toast = (props: IToastProps) => {\n  const dispatch = useDispatch();\n  const toast = useSelector<IRootState, IToast>(state => state[TOAST]);\n  const isOpen = toast[props.id];\n\n  return (\n    <FadeTransition in={isOpen}>\n      <Dimmed isShow={isOpen}>\n        <DrawerTransition in={isOpen}>\n          <div className=\"toast-wrapper\">\n            <h3 className=\"toast-title\">Info</h3>\n            <div className=\"toast-contents\">{props.children}</div>\n            <button\n              className=\"toast-button\"\n              onClick={() => {\n                dispatch(toastActions.close(props.id));\n                if (props.onClose) {\n                  props.onClose();\n                }\n              }}\n            >\n              OK\n            </button>\n          </div>\n        </DrawerTransition>\n      </Dimmed>\n    </FadeTransition>\n  );\n};\n","import {\n  combineReducers,\n  configureStore,\n  Dispatch,\n  getDefaultMiddleware,\n  Middleware,\n  MiddlewareAPI,\n  ReducersMapObject\n} from \"@reduxjs/toolkit\";\n\nimport { setState } from \"@/utils/storage\";\n\nimport { TOAST, toastReducer } from \"./Toast\";\nimport { TODO, todoReducer } from \"./Todo\";\n\nconst rootReducer = combineReducers({\n  [TOAST]: toastReducer,\n  [TODO]: todoReducer\n} as ReducersMapObject);\n\nconst persistMiddleware: Middleware = ({ getState }: MiddlewareAPI) => (\n  next: Dispatch\n) => action => {\n  const returnValue = next(action);\n\n  setState(getState());\n\n  return returnValue;\n};\n\nexport type IRootState = ReturnType<typeof rootReducer>;\nexport default configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware(), persistMiddleware]\n});\n","import \"./styles/main.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"@/components/App\";\nimport store from \"@/features\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Header } from \"@/components/shared/Header\";\nimport { ListContainer } from \"@/components/shared/ListContainer\";\nimport { Main } from \"@/components/shared/Main\";\nimport { IRootState } from \"@/features\";\nimport { IItem, TODO, todoSelectors } from \"@/features/Todo\";\nimport { useRemount } from \"@/hooks/useRemount\";\n\nimport { Filters } from \"./Filters\";\nimport { Input } from \"./Input\";\nimport { Item } from \"./Item\";\nimport { Toast } from \"./shared/Toast\";\n\nexport default () => {\n  const items = useSelector<IRootState, IItem[]>(state =>\n    todoSelectors.visibleItems(state[TODO])\n  );\n  const [key, remount] = useRemount();\n\n  return (\n    <Main key={key}>\n      <Header>Todo</Header>\n      <Input />\n      <ListContainer>\n        {items.map(item => (\n          <Item key={item.id} {...item} />\n        ))}\n      </ListContainer>\n      <Filters />\n      <Toast id={TODO} onClose={remount}>\n        입력할 수 없는 특수문자를 입력했거나 올바르지 않은 입력입니다. 다시\n        시도해주세요.\n      </Toast>\n    </Main>\n  );\n};\n","import { Dispatch, SetStateAction, useCallback, useState } from \"react\";\n\nexport function useRemount(): [number, Dispatch<SetStateAction<number>>] {\n  const [key, setKey] = useState(0);\n  const remount = useCallback(() => setKey(key => key + 1), []);\n\n  return [key, remount];\n}\n"],"sourceRoot":""}